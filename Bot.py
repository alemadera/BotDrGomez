from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
    ConversationHandler
)
import logging
import asyncio
import os

# Configuraci√≥n de logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Estados de la conversaci√≥n
(
    MENU_ES, POLICIES, CONFIRMATION,
    CITA_NOMBRE, CITA_NACIMIENTO, CITA_EDAD, CITA_DOCUMENTO, CITA_OCUPACION,
    CITA_REFERIDO, CITA_TELFIJO, CITA_CELULAR, CITA_CORREO, CITA_DIRECCION,
    TRATAMIENTO_MENU, TRATAMIENTO_INFO, PRECIOS_MENU, PRECIOS_DECISION, 
    EDUCACION_MENU, EDUCACION_DECISION, CONTACTO_OPCION, CONTACTO_RESPUESTA,
    SUERO_MENU, SUERO_BIENESTAR, SUERO_HORMONAL, SUERO_POSTQX, SUERO_INFO
) = range(26)



async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Inicio - Selecci√≥n de idioma"""
    user = update.message.from_user
    logger.info(f"Usuario {user.first_name} inici√≥ el bot")
    
    buttons = [["üóìÔ∏è Agendar cita", "üíä Tratamientos"],
            ["üìÑ Enviar ex√°menes", "üíß Sueroterapia"],
            ["üí∞ Precios", "üåø Medicina funcional"],
            ["üë• Contactar Asesor"]]
    await update.message.reply_text(
    "üëã ¬°Hola! Soy el asistente virtual del Dr. Luis Fernando G√≥mez.\n\n"
    "Estoy aqu√≠ para ayudarte. Selecciona una opci√≥n del men√∫ üëá",
    reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    )
    return MENU_ES

async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Men√∫ principal"""
    
    buttons = [["üóìÔ∏è Agendar cita", "üíä Tratamientos"],
                ["üìÑ Enviar ex√°menes", "üíß Sueroterapia"],
                ["üí∞ Precios", "üåø Medicina funcional"],
                ["üë• Contactar Asesor"]]
    await update.message.reply_text(
        "üîÑ Men√∫ reiniciado. ¬øEn qu√© puedo ayudarte hoy?",
        reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    )
    return MENU_ES


# ======== MANEJADORES DE MEN√ö EN ESPA√ëOL ============
async def menu_es(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text

    if text == "üóìÔ∏è Agendar cita":
        await update.message.reply_text(
            "üìã *DATOS B√ÅSICOS DEL PACIENTE*\n\n"
            "A continuaci√≥n, te pediremos la siguiente informaci√≥n:\n\n"
            "1Ô∏è‚É£ Nombre completo del paciente\n"
            "2Ô∏è‚É£ Fecha de nacimiento\n"
            "3Ô∏è‚É£ A√±os cumplidos\n"
            "4Ô∏è‚É£ N√∫mero de documento\n"
            "5Ô∏è‚É£ Ocupaci√≥n\n"
            "6Ô∏è‚É£ Referido por\n"
            "7Ô∏è‚É£ Tel√©fono fijo\n"
            "8Ô∏è‚É£ Celular\n"
            "9Ô∏è‚É£ Correo electr√≥nico\n"
            "üîü Direcci√≥n de residencia\n\n"
            "üìù *Empecemos*. Por favor escribe el *nombre completo del paciente*:",
            parse_mode="Markdown"
        )
        return CITA_NOMBRE

    elif text == "üíä Tratamientos":
        return await tratamientos_menu(update, context)

    elif text == "üìÑ Enviar ex√°menes":
        await update.message.reply_text(
            "üìé Puedes enviar tus ex√°menes o informaci√≥n m√©dica a:\n"
            "- Correo: doctor@correo.com\n"
            "- WhatsApp: +57 123 456 7890\n\n"
            "Incluye tu nombre completo y la fecha de tu cita.\n"
            "Si lo prefieres, tambi√©n puedes adjuntar aqu√≠ el archivo."
        )
        return await handle_policies(update, context)

    elif text == "üíß Sueroterapia":
        return await suero_menu(update, context)

    elif text == "üí∞ Precios":
        return await precios_menu(update, context)
    
    elif text == "üåø Medicina funcional":
        return await educacion_menu(update, context)
    
    elif text == "üë• Contactar Asesor":
        return await contacto_menu(update, context)

    else:
        await update.message.reply_text("Por favor elige una opci√≥n v√°lida del men√∫.")
        return MENU_ES


async def tratamientos_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Men√∫ de opciones sobre tratamientos"""
    opciones = [["Condiciones homeop√°ticas", "Condiciones funcionales"],
                ["Tratamientos espec√≠ficos", "¬øC√≥mo funciona?"],
                ["Volver"]]

    await update.message.reply_text(
        "¬øSobre qu√© aspecto de los tratamientos deseas saber m√°s?",
        reply_markup=ReplyKeyboardMarkup(opciones, resize_keyboard=True)
    )
    return TRATAMIENTO_MENU

async def tratamientos_info(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text
    respuestas = {
        "Condiciones homeop√°ticas": "üìå Tratamos alergias, ansiedad, insomnio, migra√±a, problemas digestivos, entre otros.",
        "Condiciones funcionales": "üìå Abordamos problemas como fatiga cr√≥nica, inflamaci√≥n intestinal, desequilibrios hormonales, resistencia a la insulina, etc.",
        "Tratamientos espec√≠ficos": "üíä Usamos f√≥rmulas naturales, homeopat√≠a, sueros funcionales, suplementos y dieta personalizada.",
        "¬øC√≥mo funciona?": "‚öôÔ∏è Combinamos diagn√≥stico funcional, medicina natural y tratamiento integral del origen del problema.",
        "Volver": "Regresando al men√∫ principal..."
    }

    if text == "Volver":
        return await menu(update, context)

    if text in respuestas:
        await update.message.reply_text(respuestas[text])
        botones = [["S√≠", "No"]]
        await update.message.reply_text(
            "¬øDeseas saber algo m√°s sobre los tratamientos?",
            reply_markup=ReplyKeyboardMarkup(botones, one_time_keyboard=True, resize_keyboard=True)
        )
        return TRATAMIENTO_INFO
    else:
        await update.message.reply_text("Selecciona una opci√≥n v√°lida del men√∫ de tratamientos.")
        return TRATAMIENTO_MENU

async def tratamientos_continuar(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text.strip().lower()

    if text == "s√≠":
        return await tratamientos_menu(update, context)
    elif text == "no":
        return await handle_policies(update, context)
    else:
        await update.message.reply_text("üîÅ No entend√≠ tu respuesta. Volveremos al men√∫ principal.")
        return await menu(update, context)


async def precios_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    botones = [
        ["Primera consulta", "Seguimientos"],
        ["Paquetes funcionales", "Formas de pago"],
        ["Enlace de pago", "Volver"]
    ]
    await update.message.reply_text(
        "üí∞ ¬øQu√© informaci√≥n deseas consultar sobre precios?",
        reply_markup=ReplyKeyboardMarkup(botones, resize_keyboard=True)
    )
    return PRECIOS_MENU

async def precios_info(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text

    respuestas = {
        "Primera consulta": "ü©∫ Valor: $150.000 COP\nDuraci√≥n aproximada: 60 minutos.",
        "Seguimientos": "üìÖ Valor: $100.000 COP por sesi√≥n de control o evoluci√≥n.",
        "Paquetes funcionales": "üéØ Tenemos paquetes mensuales desde $350.000 que incluyen consulta + tratamiento personalizado.",
        "Formas de pago": "üí≥ Aceptamos Nequi, Daviplata, transferencia bancaria y tarjeta.",
        "Enlace de pago": "üîó Puedes pagar aqu√≠: [https://tu-enlace-de-pago.com]",
    }

    if text in respuestas:
        await update.message.reply_text(respuestas[text])
        botones = [["Agendar cita", "Otra consulta", "No, gracias"]]
        await update.message.reply_text(
            "¬øDeseas agendar una cita o consultar otra cosa?",
            reply_markup=ReplyKeyboardMarkup(botones, one_time_keyboard=True, resize_keyboard=True)
        )
        return PRECIOS_DECISION

    elif text == "Volver":
        return await menu(update, context)
    
    else:
        await update.message.reply_text("Selecciona una opci√≥n v√°lida sobre precios.")
        return PRECIOS_MENU

async def precios_siguiente(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text

    if text == "Agendar cita":
        await update.message.reply_text("üìù ¬øCu√°l es tu *nombre completo* y *fecha de nacimiento*?", parse_mode="Markdown")
        return CITA_NOMBRE

    elif text == "Otra consulta":
        return await precios_menu(update, context)

    elif text == "No, gracias":
        return await handle_policies(update, context)

    else:
        await update.message.reply_text(
            "üîÅ No entend√≠ tu respuesta. Por favor selecciona una opci√≥n v√°lida:",
            reply_markup=ReplyKeyboardMarkup(
                [["Agendar cita", "Otra consulta", "No, gracias"]],
                one_time_keyboard=True,
                resize_keyboard=True
            )
        )
        return PRECIOS_DECISION

async def educacion_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    botones = [
        ["¬øQu√© es medicina funcional?", "¬øQu√© es homeopat√≠a?"],
        ["¬øC√≥mo te ayuda?", "Testimonios"],
        ["Recomendaciones", "Volver"]
    ]
    await update.message.reply_text(
        "üåø ¬øQu√© deseas saber sobre nuestro enfoque natural y funcional?",
        reply_markup=ReplyKeyboardMarkup(botones, resize_keyboard=True)
    )
    return EDUCACION_MENU

async def educacion_info(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text.strip()

    # Verificar si el usuario quiere volver al men√∫ principal
    if text == "Volver":
        return await menu(update, context)

    respuestas = {
        "¬øQu√© es medicina funcional?": "üß† Es un enfoque que busca el origen de la enfermedad, no solo tratar s√≠ntomas.",
        "¬øQu√© es homeopat√≠a?": "üíß Medicina natural basada en microdosis que estimulan la autocuraci√≥n del cuerpo.",
        "¬øC√≥mo te ayuda?": "‚ú® Ayuda a mejorar energ√≠a, digesti√≥n, inmunidad, hormonas y m√°s, de forma personalizada.",
        "Testimonios": "üì£ Hemos ayudado a cientos de pacientes a recuperar su bienestar.",
        "Recomendaciones": "üìã Llega a tu cita en ayunas (si aplica), con ex√°menes recientes y sin maquillaje si es facial.",
    }

    if text in respuestas:
        await update.message.reply_text(respuestas[text])
        botones = [["S√≠", "No", "Volver"]]
        await update.message.reply_text(
            "¬øTe gustar√≠a agendar una cita o seguir consultando?",
            reply_markup=ReplyKeyboardMarkup(botones, one_time_keyboard=True, resize_keyboard=True)
        )
        return EDUCACION_DECISION

    await update.message.reply_text("Por favor elige una opci√≥n v√°lida.")
    return EDUCACION_MENU


async def educacion_siguiente(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text.strip().lower()

    if "s√≠" in text or "si" in text:
        await update.message.reply_text("üìù ¬øCu√°l es tu *nombre completo* y *fecha de nacimiento*?", parse_mode="Markdown")
        return CITA_NOMBRE
    elif "volver" in text:
        return await educacion_menu(update, context)
    else:
        return await handle_policies(update, context)

async def contacto_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    botones = [["Por WhatsApp", "Por llamada"], ["Volver al men√∫"]]
    await update.message.reply_text(
        "üë• ¬øC√≥mo prefieres que alguien del equipo te contacte directamente?",
        reply_markup=ReplyKeyboardMarkup(botones, resize_keyboard=True)
    )
    return CONTACTO_OPCION

async def contacto_respuesta(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text.strip().lower()

    if "whatsapp" in text:
        await update.message.reply_text(
            "üì± Nuestro equipo te contactar√° por WhatsApp al n√∫mero que tenemos registrado.\n"
            "‚è∞ Horario de atenci√≥n: Lunes a Viernes, 8am a 5pm."
        )
        await update.message.reply_text("‚åõ Tiempo estimado de respuesta: dentro de las pr√≥ximas 2 horas h√°biles.")
        return await handle_policies(update, context)

    elif "llamada" in text or "llamar" in text:
        await update.message.reply_text(
            "üìû Nuestro equipo te llamar√° durante el horario de atenci√≥n registrado.\n"
            "‚è∞ Lunes a Viernes, 8am a 5pm."
        )
        await update.message.reply_text("‚åõ Tiempo estimado de respuesta: dentro de las pr√≥ximas 2 horas h√°biles.")
        return await handle_policies(update, context)

    elif "volver" in text or "men√∫" in text:
        return await menu(update, context)

    else:
        await update.message.reply_text(
            "‚ùó No entend√≠ tu respuesta.\n\n"
            "Por favor elige una opci√≥n:",
            reply_markup=ReplyKeyboardMarkup(
                [["Por WhatsApp", "Por llamada"], ["Volver al men√∫"]],
                resize_keyboard=True
            )
        )
        return CONTACTO_OPCION

async def handle_policies(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Recordatorio de pol√≠ticas antes de finalizar"""
    botones = [["S√≠, estoy de acuerdo", "No"]]
    await update.message.reply_text(
        "üìù *Recordatorio de pol√≠ticas:*\n\n"
        "- Las cancelaciones deben hacerse con al menos 24h de anticipaci√≥n.\n"
        "- Todos los datos se tratan bajo confidencialidad.\n"
        "- Al continuar, aceptas el consentimiento informado.\n\n"
        "¬øEst√°s de acuerdo?",
        parse_mode="Markdown",
        reply_markup=ReplyKeyboardMarkup(botones, one_time_keyboard=True, resize_keyboard=True)
    )
    return POLICIES

async def handle_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Confirmaci√≥n y cierre del flujo"""

    respuesta = update.message.text.lower().strip()

    if "s√≠" in respuesta or "si" in respuesta:
        await update.message.reply_text(
            "‚úÖ ¬°Gracias por contactarnos! Tu solicitud ha sido procesada.\n\n"
            "üìé Si deseas unirte a nuestra comunidad de WhatsApp: [Enlace aqu√≠]\n"
            "üìù Tambi√©n puedes responder una encuesta r√°pida: [Enlace a encuesta]",
            reply_markup=ReplyKeyboardRemove()
        )
    else:
        await update.message.reply_text(
            "Entendido. Si necesitas m√°s informaci√≥n, puedes hablar con nuestro equipo.",
            reply_markup=ReplyKeyboardRemove()
        )

    # üëá Pausa de seguridad para evitar que Telegram omita el segundo mensaje
    await asyncio.sleep(0.6)

    # üëá Mensaje final con opciones claras
    await update.message.reply_text(
        "üîÑ ¬øQu√© deseas hacer ahora?\n\n"
        "üëâ *Volver al men√∫:* /menu\n"
        "üö™ *Cerrar la conversaci√≥n:* /cancel",
        parse_mode="Markdown",
        reply_markup=ReplyKeyboardMarkup([["/menu", "/cancel"]], resize_keyboard=True)
    )

    return ConversationHandler.END

async def start_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Mostrar men√∫ principal sen espa√±ol"""
    buttons = [["üóìÔ∏è Agendar cita", "üíä Tratamientos"],
                ["üìÑ Enviar ex√°menes", "üíß Sueroterapia"],
                ["üí∞ Precios", "üåø Medicina funcional"],
                ["üë• Contactar Asesor"]]
    await update.message.reply_text(
        "üîÑ Men√∫ reiniciado. ¬øEn qu√© puedo ayudarte hoy?",
        reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    )
    return MENU_ES

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "üö™ Sesi√≥n cancelada. Puedes volver a comenzar con /start o /menu.",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

async def cita_nombre(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['nombre'] = update.message.text
    await update.message.reply_text("üìÖ Fecha de nacimiento (dd/mm/aaaa):")
    return CITA_NACIMIENTO

async def cita_nacimiento(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['nacimiento'] = update.message.text
    await update.message.reply_text("üéÇ ¬øCu√°ntos a√±os cumplidos tiene?")
    return CITA_EDAD

async def cita_edad(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['edad'] = update.message.text
    await update.message.reply_text("ü™™ N√∫mero de documento:")
    return CITA_DOCUMENTO

async def cita_documento(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['documento'] = update.message.text
    await update.message.reply_text("üíº Ocupaci√≥n:")
    return CITA_OCUPACION

async def cita_ocupacion(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['ocupacion'] = update.message.text
    await update.message.reply_text("üë§ Referido por:")
    return CITA_REFERIDO

async def cita_referido(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['referido'] = update.message.text
    await update.message.reply_text("üìû Tel√©fono fijo:")
    return CITA_TELFIJO

async def cita_telefono_fijo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['telefono_fijo'] = update.message.text
    await update.message.reply_text("üì± Celular:")
    return CITA_CELULAR

async def cita_celular(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['celular'] = update.message.text
    await update.message.reply_text("üìß Correo electr√≥nico:")
    return CITA_CORREO

async def cita_correo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['correo'] = update.message.text
    await update.message.reply_text("üè† Direcci√≥n de residencia:")
    return CITA_DIRECCION

async def cita_direccion(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['direccion'] = update.message.text

    # Resumen
    resumen = (
        "‚úÖ *Datos recibidos:*\n\n"
        f"üë§ Nombre: {context.user_data['nombre']}\n"
        f"üìÖ Nacimiento: {context.user_data['nacimiento']}\n"
        f"üéÇ Edad: {context.user_data['edad']}\n"
        f"ü™™ Documento: {context.user_data['documento']}\n"
        f"üíº Ocupaci√≥n: {context.user_data['ocupacion']}\n"
        f"üë§ Referido por: {context.user_data['referido']}\n"
        f"üìû Tel. fijo: {context.user_data['telefono_fijo']}\n"
        f"üì± Celular: {context.user_data['celular']}\n"
        f"üìß Correo: {context.user_data['correo']}\n"
        f"üè† Direcci√≥n: {context.user_data['direccion']}\n\n"
        "Ahora te mostraremos nuestras pol√≠ticas."
    )

    await update.message.reply_text(resumen, parse_mode="Markdown")
    return await handle_policies(update, context)

# ====== FLUJO DE SUEROTERAPIA ======
async def suero_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    botones = [["üßò‚Äç‚ôÄÔ∏è Bienestar general", "üß¨ Hormonales y metab√≥licos"],
            ["ü©∫ Postquir√∫rgicos y recuperaci√≥n", "üîô Volver al men√∫"]]
    await update.message.reply_text(
        "üíß Elige la categor√≠a de suero que te interesa:",
        reply_markup=ReplyKeyboardMarkup(botones, resize_keyboard=True)
    )
    return SUERO_MENU

async def suero_categoria(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    opcion = update.message.text

    if opcion == "üßò‚Äç‚ôÄÔ∏è Bienestar general":
        botones = [["‚ú® Suero multivitam√≠nico", "üçÉ Detox hep√°tico"],
                ["üï∞Ô∏è Antiaging", "üòå Antiestr√©s"],
                ["üõ°Ô∏è Inmunol√≥gico", "üîô Volver"]]
        await update.message.reply_text("üßò‚Äç‚ôÄÔ∏è Sueros para bienestar general:", reply_markup=ReplyKeyboardMarkup(botones, resize_keyboard=True))
        return SUERO_BIENESTAR

    elif opcion == "üß¨ Hormonales y metab√≥licos":
        botones = [["üî• Metabolismo activo", "üßò‚Äç‚ôÇÔ∏è Equilibrio hormonal"],
                ["üå∏ Salud femenina", "üîô Volver"]]
        await update.message.reply_text("üß¨ Sueros hormonales y metab√≥licos:", reply_markup=ReplyKeyboardMarkup(botones, resize_keyboard=True))
        return SUERO_HORMONAL

    elif opcion == "ü©∫ Postquir√∫rgicos y recuperaci√≥n":
        botones = [["üí™ Recuperaci√≥n muscular", "ü©π Cicatrizaci√≥n avanzada"],
                ["üîô Volver"]]
        await update.message.reply_text("ü©∫ Sueros para recuperaci√≥n postquir√∫rgica:", reply_markup=ReplyKeyboardMarkup(botones, resize_keyboard=True))
        return SUERO_POSTQX

    elif opcion == "üîô Volver al men√∫":
        return await menu(update, context)
    
    else:
        await update.message.reply_text("Selecciona una opci√≥n v√°lida.")
        return SUERO_MENU

async def suero_info(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    suero = update.message.text
    descripciones = {
        "‚ú® Suero multivitam√≠nico": "üíâ Combinaci√≥n de vitaminas esenciales para energ√≠a, piel, sistema inmune y vitalidad general.",
        "üçÉ Detox hep√°tico": "üß™ Suero con antioxidantes que ayudan a eliminar toxinas y mejorar la funci√≥n hep√°tica.",
        "üï∞Ô∏è Antiaging": "üïäÔ∏è Mezcla con efecto antioxidante y celular, ayuda a combatir el envejecimiento prematuro.",
        "üòå Antiestr√©s": "üåø Ayuda a disminuir ansiedad, fatiga y estr√©s cr√≥nico, mejorando el estado de √°nimo.",
        "üõ°Ô∏è Inmunol√≥gico": "üõ°Ô∏è Refuerza las defensas naturales del cuerpo y mejora la resistencia ante infecciones.",
        "üî• Metabolismo activo": "‚ö° Favorece la quema de grasa, energ√≠a celular y metabolismo basal.",
        "üßò‚Äç‚ôÇÔ∏è Equilibrio hormonal": "üîÑ Regula de forma natural niveles hormonales relacionados con fatiga, insomnio o estr√©s.",
        "üå∏ Salud femenina": "üë© Suero enfocado en el bienestar hormonal, emocional y f√≠sico femenino.",
        "üí™ Recuperaci√≥n muscular": "üí™ Ideal postejercicio o postcirug√≠a, ayuda a reducir fatiga y dolores musculares.",
        "ü©π Cicatrizaci√≥n avanzada": "üß¨ Estimula la regeneraci√≥n tisular y mejora el proceso de cicatrizaci√≥n postoperatoria."
    }

    if suero in descripciones:
        await update.message.reply_text(descripciones[suero])
        botones = [["üìÖ Agendar cita", "üíß Ver otro suero", "üîô Men√∫ principal"]]
        await update.message.reply_text(
            "¬øQu√© deseas hacer ahora?",
            reply_markup=ReplyKeyboardMarkup(botones, resize_keyboard=True)
        )
        return SUERO_INFO

    elif suero == "üîô Volver":
        return await suero_menu(update, context)

    elif suero == "üíß Ver otro suero":
        return await suero_menu(update, context)

    elif suero == "üìÖ Agendar cita":
        await update.message.reply_text("üìù ¬øCu√°l es tu *nombre completo* y *fecha de nacimiento*?", parse_mode="Markdown")
        return CITA_NOMBRE

    elif suero == "üîô Men√∫ principal":
        return await menu(update, context)

    else:
        await update.message.reply_text("Por favor selecciona una opci√≥n v√°lida.")
        return SUERO_INFO

def main() -> None:
    """Ejecutar el bot"""
    telegram_bot_token = os.environ.get("TELEGRAM_BOT_TOKEN")
    print("TOKEN:", telegram_bot_token)

    if not telegram_bot_token:
        # Esto es importante para que el bot no intente iniciar sin el token
        logger.error("Error: La variable de entorno TELEGRAM_BOT_TOKEN no est√° configurada.")
        # Opcional: puedes salir del programa si el token es cr√≠tico
        import sys
        sys.exit(1)
        
    application = Application.builder().token(telegram_bot_token).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start),
                    CommandHandler('menu', start_menu)],
        states={
            MENU_ES: [MessageHandler(filters.TEXT & ~filters.COMMAND, menu_es)],
            POLICIES: [MessageHandler(filters.Regex("(?i)^s√≠.*|^si.*|^no$"), handle_confirmation)],
            CITA_NOMBRE: [MessageHandler(filters.TEXT & ~filters.COMMAND, cita_nombre)],
            CITA_NACIMIENTO: [MessageHandler(filters.TEXT & ~filters.COMMAND, cita_nacimiento)],
            CITA_EDAD: [MessageHandler(filters.TEXT & ~filters.COMMAND, cita_edad)],
            CITA_DOCUMENTO: [MessageHandler(filters.TEXT & ~filters.COMMAND, cita_documento)],
            CITA_OCUPACION: [MessageHandler(filters.TEXT & ~filters.COMMAND, cita_ocupacion)],
            CITA_REFERIDO: [MessageHandler(filters.TEXT & ~filters.COMMAND, cita_referido)],
            CITA_TELFIJO: [MessageHandler(filters.TEXT & ~filters.COMMAND, cita_telefono_fijo)],
            CITA_CELULAR: [MessageHandler(filters.TEXT & ~filters.COMMAND, cita_celular)],
            CITA_CORREO: [MessageHandler(filters.TEXT & ~filters.COMMAND, cita_correo)],
            CITA_DIRECCION: [MessageHandler(filters.TEXT & ~filters.COMMAND, cita_direccion)],
            TRATAMIENTO_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, tratamientos_info)],
            TRATAMIENTO_INFO: [MessageHandler(filters.Regex("^(S√≠|No)$"), tratamientos_continuar)],
            PRECIOS_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, precios_info)],
            PRECIOS_DECISION: [MessageHandler(filters.TEXT & ~filters.COMMAND, precios_siguiente)],
            EDUCACION_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, educacion_info)],
            EDUCACION_DECISION: [MessageHandler(filters.TEXT & ~filters.COMMAND, educacion_siguiente)],
            CONTACTO_OPCION: [MessageHandler(filters.TEXT & ~filters.COMMAND, contacto_respuesta)],
            SUERO_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, suero_categoria)],
            SUERO_BIENESTAR: [MessageHandler(filters.TEXT & ~filters.COMMAND, suero_info)],
            SUERO_HORMONAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, suero_info)],
            SUERO_POSTQX: [MessageHandler(filters.TEXT & ~filters.COMMAND, suero_info)],
            SUERO_INFO: [MessageHandler(filters.TEXT & ~filters.COMMAND, suero_info)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
        allow_reentry=True
    )

    application.add_handler(conv_handler)

    application.add_handler(CommandHandler("cancel", cancel))
    logger.info("Bot iniciado. Esperando comandos...")
    application.run_polling()

if __name__ == '__main__':
    main()
